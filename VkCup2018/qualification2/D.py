"""
D. Пограничные врата
========================================================================================
ограничение по времени на тест1 секунда
ограничение по памяти на тест256 мегабайт
вводстандартный ввод
выводстандартный вывод
========================================================================================

Герой Аркадий находится на узкой полоске земли, разделенной на n зон, пронумерованных от 1 до n.
Из i-й зоны можно пройти лишь в (i - 1)-ю зону и в (i + 1)-ю зону, если они существуют.
При этом между каждой парой соседних зон находятся пограничные врата, которые могут быть разных цветов,
цвет врат между i-й и (i + 1)-й зоной равен gi.

Аркадий может пройти пограничные врата некоторого цвета, только если он перед этим побывал в одном из шатров
хранителей ключей этого цвета и взял ключ. В каждой зоне находится ровно один шатер хранителя ключей некоторого цвета,
цвет шатра в i-й зоне равен ki. После посещения шатра определенного цвета Аркадий может неограниченное число раз
проходить через любые врата этого цвета.

На проход через одни врата Аркадий тратит один ход, на посещение шатра и другие перемещения ходы не требуются.
За какое минимальное число ходов Аркадий может попасть из зоны a в зону b, если изначально у него нет никаких ключей?

========================================================================================
Входные данные
========================================================================================
Первая строка содержит три целых числа n, a, b (2 ≤ n ≤ 100 000, 1 ≤ a, b ≤ n, a ≠ b) — число зон,
номер начальной зоны и номер конечной зоны, соответственно.

Вторая строка содержит n - 1 целое число g1, g2, ..., gn - 1 (1 ≤ gi ≤ 100 000),
где gi означает цвет пограничных врат между зонами i и i + 1.

Третья строка содержит n целых чисел k1, k2, ..., kn (1 ≤ ki ≤ 100 000),
где ki означает цвет шатра хранителя ключей в i-й зоне.

========================================================================================
Выходные данные
========================================================================================
Если Аркадий не может попасть из зоны a в зону b, не имея изначально ключей, выведите -1.

Иначе выведите минимальное количество ходов, которое потребуется Аркадию.
"""
import networkx as nx


def read_line_of_numbers():
    return map(int, input().split())


def read_index_dict():
    keys = read_line_of_numbers()
    result = {}
    i = 1
    for k in keys:
        result[i] = k
        i += 1
    return result


def next_idx(b, cur):
    return cur - 1 if cur > b else cur + 1


def solution():
    n, a, b = read_line_of_numbers()
    keys_dict = read_index_dict()
    gates_dict = read_index_dict()
    my_keys = {keys_dict[a]: True}

    def get_idx_by_value_from_dict(_dict, value):
        return list(_dict.keys())[list(_dict.values()).index(value)]

    def get_key_idx_by_color(color):
        return get_idx_by_value_from_dict(keys_dict, color)

    def get_gate_idx_by_color(color):
        return get_idx_by_value_from_dict(gates_dict, color)

    def add_edge_by_pos(x):
        color = keys_dict[x]
        gate_idx = get_gate_idx_by_color(color)
        G.add_edge(gate_idx, gate_idx+1)

    G = nx.DiGraph
    for i, key in keys_dict.items():
        G.add_node(i, color=key)

    counter = 0
    target = b
    cur = next_idx(target, a)
    while cur != b:
        if my_keys.get(gates_dict[cur]):
            my_keys[keys_dict[cur]] = True
        else:
            counter += 1
            color = gates_dict[cur]

            while not ok or cur != target:
                try:
                    nx.shortest_path(G, cur, target)
                except nx.NetworkXNoPath:


        cur = next_idx(target, cur)
        counter += 1

    print(counter)


if __name__ == '__main__':
    solution()

"""
Пример 1:
========================================================================================
5 4 1
3 1 1 2
7 1 2 1 3
========================================================================================
7

Пример 2:
========================================================================================
5 1 5
4 3 2 1
4 3 2 5 5
========================================================================================
-1
"""